pipeline {

    agent none
    
    environment {
       GITHUB_CREDENTIALS_MELI = credentials('GITHUB_CREDENTIALS_MELI')
       BASE_URL_PROD = credentials('BASE_URL_PROD')
       STAGE = 'staging'
    
    }

    stages {
       stage('Get Code') {
          agent {
             docker {
                 image 'melissa15/samcli-agent:1.0'
                 reuseNode true
            }
          
          }
          
          steps {
              checkout([
                $class: 'GitSCM',
                branches:[[name: '*/develop']],
                userRemoteConfigs: [[
                   url: 'https://github.com/MelissaMelendez15/todo-list-aws-meli.git',
                   credentialsId: 'GITHUB_CREDENTIALS_MELI'
                ]]
              ])
              
              stash name: 'workspace-stashed', includes: '**'
              
              sh '''
                 echo "Archivos descargados y stashed:"
                 
                 ls -l
              
              '''
           
           }
       
       }
       
       stage('Static') {
          agent {
             docker {
                 image 'melissa15/python-static-checker:1.0'
                 reuseNode true
            }
        }
          
          steps {
             
             unstash 'workspace-stashed'
             
             sh  '''
                 echo "Ejecutando Flake8..."
                 flake8 src/ --exit-zero --format=default > flake8-report.txt || true
                 
                 echo "Ejecutando Bandit..."
                 bandit -r src/ -f txt -o bandit-report.txt || true
             '''
             
             recordIssues tools: [flake8(pattern: 'flake8-report.txt')]
             archiveArtifacts artifacts: 'bandit-report.txt', fingerprint:true
    
            }
        }
        
        stage('Rest Test') {
           agent {
              docker {
                 image 'melissa15/python-pytest:1.4'
                 reuseNode true
                 args '--entrypoint=""'
                }
            }
            
            environment {
               BASE_URL = "${BASE_URL_PROD}"
            }
            
            steps {
               unstash 'workspace-stashed'
               
               sh '''
                  echo "URL del entorno serverless:"
                   echo "$BASE_URL"

                  mkdir -p test-reports

                  pytest -v test/integration/todoApiTest.py \
                         --junitxml=test-reports/pytest-report.xml
               '''
             
               junit 'test-reports/pytest-report.xml'
               
            }
        }

       
       stage ('Clean Workspace') {
          agent {
             docker {
                 image 'melissa15/cleaner-agent:1.0'
                 reuseNode true
                }
            }
       
            steps {
               echo 'Limpiando Workspace con agente personalizado'
               cleanWs()
            }
        }
       
    }
}
