pipeline {

    agent none

    options {
       skipDefaultCheckout(true)
    }
    
    environment {
       GITHUB_CREDENTIALS_MELI = credentials('GITHUB_CREDENTIALS_MELI')
       BASE_URL_PROD = credentials('BASE_URL_PROD')
       STAGE = 'staging'
    
    }

    stages {
       stage('Get Code') {
          agent {
             docker {
                 image 'melissa15/samcli-agent:1.5'
                 reuseNode true
            }
          
          }
          
          steps {
              checkout([
                $class: 'GitSCM',
                branches:[[name: '*/develop']],
                userRemoteConfigs: [[
                   url: 'https://github.com/MelissaMelendez15/todo-list-aws-meli.git',
                   credentialsId: 'GITHUB_CREDENTIALS_MELI'
                ]]
              ])
              
              sh '''
                echo "Descargando configuración desde repo externo (staging)..."
                curl -o samconfig.toml https://raw.githubusercontent.com/MelissaMelendez15/todo-list-aws-config/staging/samconfig.toml
                
                echo "Contenido del samconfig.toml descargado:"
                ls -l samconfig.*
                cat samconfig.toml
              '''
              
              stash name: 'workspace-stashed', includes: '**'
              
              sh '''
                 echo "Archivos descargados y stashed:"
                 ls -l
              '''
            }
       
       }
       
       stage('Static') {
          agent {
             docker {
                 image 'melissa15/python-static-checker:1.0'
                 reuseNode true
            }
        }
          
          steps {
             
             unstash 'workspace-stashed'
             
             sh  '''
                 echo "===INFO STATIC==="
                 echo "Usuario: $(whoami)"
                 echo "Host: $(hostname)"
                 echo "WORKSPACE: ${WORKSPACE}"
                 
                 
                 echo "Ejecutando Flake8..."
                 flake8 src/ --exit-zero --format=default > flake8-report.txt || true
                 
                 echo "Ejecutando Bandit..."
                 bandit -r src/ -f txt -o bandit-report.txt || true
             '''
             
             recordIssues tools: [flake8(pattern: 'flake8-report.txt')]
             archiveArtifacts artifacts: 'bandit-report.txt', fingerprint:true
    
            }
        }
        
        stage('Deploy') {
          agent {
            docker {
              image 'melissa15/samcli-agent:1.5'
              reuseNode true
            }
          
          }
          
          steps {
            unstash 'workspace-stashed'
          
             sh  '''
              set -e
              
              echo "Usuario actual:"
              whoami || echo "No se pudo obtner el usuario"
             
              echo "Nombre del host:"
              hostname ||echo "No se pudo obtner el hostname"
                  
               echo "Ruta de SAM CLI:"
               which sam || echo "SAM no está en el PATH"
               
               echo "Ruta actual de trabajo:"
               echo "${WORKSPACE}"
                  
               echo "Probando versión de SAM:"
               sam --version || echo "SAM no funciona aquí"
                  
               echo "Construyendo el paquete SAM..."
               sam build

               echo "Validando la plantilla SAM..."
               sam validate --region us-east-1

               echo "Desplegando recursos a serverlees al entorno de Staging..."
               sam deploy --no-fail-on-empty-changeset || echo "No hay cambios que desplegar"
             '''
            }
        }
        
        stage('Rest Test') {
           agent {
              docker {
                 image 'melissa15/python-pytest:1.4'
                 reuseNode true
                 args '--entrypoint=""'
                }
            }
            
            environment {
               BASE_URL = "${BASE_URL_PROD}"
            }
            
            steps {
               unstash 'workspace-stashed'
               
               sh '''
                  echo "URL del entorno serverless:"
                  echo "$BASE_URL"

                  mkdir -p test-reports
                  
                 echo "===INFO REST TEST==="
                 echo "Usuario: $(whoami)"
                 echo "Host: $(hostname)"
                 echo "WORKSPACE: ${WORKSPACE}"

                  pytest -v test/integration/todoApiTest.py \
                         --junitxml=test-reports/pytest-report.xml
               '''
             
               junit 'test-reports/pytest-report.xml'
               
            }
        }
        
        
       stage('Promote') {
          agent {
             docker {
               image 'melissa15/samcli-agent:1.5'
               reuseNode true
            }
          
          }
       
          steps {
          
            withCredentials([usernamePassword(
               credentialsId: 'GITHUB_CREDENTIALS_MELI', 
               usernameVariable: 'GIT_USER', 
               passwordVariable: 'GIT_PASS')]) {
               
               unstash 'workspace-stashed'
               
               sh '''
                  echo "===INFO PROMOTE==="
                  echo "Usuario: $(whoami)"
                  echo "Host: $(hostname)"
                  echo "WORKSPACE: ${WORKSPACE}"
                 
                  echo "Promoviendo release..."
                  git config user.name "jenkins"
                  git config user.email "jenkins@localhost"
                 
                  echo "Descargando cambios locales..."
                  git reset --hard HEAD
               
                  git checkout master
                  git checkout origin/develop -- test-reports/release.txt || echo "Nada que copiar"
              
              
                  git add test-reports/release.txt || echo "Nada que agregar"
                  git commit -m "chore(release): versión marcada como release por jenkins" || echo "Nada que commitear"
               
                  echo "Pusheando a master..."
                  git push https://${GIT_USER}:${GIT_PASS}@github.com/MelissaMelendez15/todo-list-aws-meli.git master
             
                  echo "Etapa Promote finalizada"
               '''
            }
            
          }
        }
       
       
       stage ('Clean Workspace') {
          agent {
             docker {
                 image 'melissa15/cleaner-agent:1.0'
                 reuseNode true
                }
            }
       
            steps {
               echo 'Limpiando Workspace con agente personalizado'
               cleanWs()
            }
        }
       
    }
}
